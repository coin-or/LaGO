Index: Cgc/src/DynNet.h
===================================================================
--- Cgc/src/DynNet.h	(Revision 21)
+++ Cgc/src/DynNet.h	(Arbeitskopie)
@@ -91,17 +91,17 @@
     {
         typedef typename DynNetArcTypes<NodeInfo, ArcInfo >::ArcBag MyArcBag;
         typedef typename MyArcBag::iterator MyArcBagIter;
-        MyArcBagIter ait; 
+        MyArcBagIter ait;
         ArcIterator(const MyArcBagIter &iter):ait(iter)
         {}
     public:
         ArcIterator(){}
-        ArcIterator(const ArcIterator &otherIter) 
+        ArcIterator(const ArcIterator &otherIter)
             :ait(otherIter.ait) { }
         __ArcType<NodeInfo, ArcInfo > &operator*();//{ return (*(*ait));}
         const __ArcType<NodeInfo, ArcInfo > &operator*()const ;//{ return (*(*ait));}
         int msvcCompareHack(const ArcIterator &otherIt)const
-        { 	  
+        {
             MyArcBagIter a = ait;
             MyArcBagIter b = otherIt.ait;
             return (a != b);
@@ -115,21 +115,21 @@
         */
 
         ArcIterator & operator=(const ArcIterator &otherIter)
-        { 
-            ait = otherIter.ait; return *this; 
+        {
+            ait = otherIter.ait; return *this;
         }
 
         ArcIterator & operator++()
-        { 
-            static ArcIterator tmp; 
+        {
+            static ArcIterator tmp;
             tmp.ait = ait;
-            ait++; 
+            ait++;
             return tmp;
         }
 
         ArcIterator & operator++(int)
-        { 
-            ait++; 
+        {
+            ait++;
             return *this;
         }
         friend class __NodeType<NodeInfo,ArcInfo>;
@@ -181,7 +181,7 @@
         // remove the forward reference of a sequence of arcs...it also calls
         // back_erase to remove them from the back-list of the head-end
         void justErase(const iterator &only)
-        { 
+        {
 
             MyArcPnt mapnt= const_cast< MyArcPnt > (&(*only));
             MyArcBagIter mabi = fwdArcs.find(mapnt);
@@ -191,7 +191,7 @@
         {
             for(iterator start=first;start!=last;start++)
             {
-                __NodeType< NodeInfo, ArcInfo > &node = 
+                __NodeType< NodeInfo, ArcInfo > &node =
                     const_cast< __NodeType< NodeInfo, ArcInfo > & >((*(*start).head()));
                 node.back_erase(&(*start));
             }
@@ -206,7 +206,7 @@
         void erase(const DynNetArcIterator<DynNet<NodeInfo,ArcInfo>,NodeInfo,ArcInfo>  &fst, const DynNetArcIterator<DynNet<NodeInfo,ArcInfo>,NodeInfo,ArcInfo>  &snd)
         { erase(fst.arcIter,snd.arcIter); }
 
-        typename __NodeType< NodeInfo, ArcInfo  >::iterator 
+        typename __NodeType< NodeInfo, ArcInfo  >::iterator
             insert(const __ArcType<NodeInfo, ArcInfo > &newArc);
         void back_insert(const __ArcType<NodeInfo,ArcInfo> *newArc);
 
@@ -215,7 +215,7 @@
             iterator last = fwdArcs.end();
             for(iterator start=fwdArcs.begin();start!=last;start++)
             {
-                __NodeType< NodeInfo, ArcInfo > &node = 
+                __NodeType< NodeInfo, ArcInfo > &node =
                     const_cast< __NodeType< NodeInfo, ArcInfo > &>(*((*start).head()));
                 node.back_erase(&(*start));
                 delete &(*start);
@@ -223,7 +223,7 @@
             iterator last2 = backArcs.end();
             for(iterator start = backArcs.begin(); start != last2;start++)
             {
-                __NodeType< NodeInfo, ArcInfo > &node = 
+                __NodeType< NodeInfo, ArcInfo > &node =
                     const_cast< __NodeType< NodeInfo, ArcInfo > &>(*((*start).tail()));
                 node.justErase(start);
                 delete &(*start);
@@ -239,7 +239,7 @@
         { return ArcIterator<NodeInfo, ArcInfo >(fwdArcs.begin());}
         /// returns const_iterator to first arc leaving this node.
         const_iterator begin()const
-        {  
+        {
             __NodeType<NodeInfo,ArcInfo> *nonConstThis = const_cast<__NodeType<NodeInfo,ArcInfo> *>(this);
             MyArcBagIter iter = nonConstThis->fwdArcs.begin();
             return ArcIterator<NodeInfo,ArcInfo>(iter);
@@ -251,13 +251,13 @@
         const_back_iterator back_begin()const
         { return ArcIterator<NodeInfo, ArcInfo >(backArcs.begin());}
 
-        /// returns iterator one past the last arc 
+        /// returns iterator one past the last arc
         iterator end()
         { return ArcIterator<NodeInfo, ArcInfo >(fwdArcs.end()); }
 
-        /// returns const_iterator one past the last arc 
+        /// returns const_iterator one past the last arc
         const_iterator end()const
-        { 
+        {
             __NodeType<NodeInfo,ArcInfo> *nonConstThis = const_cast<__NodeType<NodeInfo,ArcInfo> *>(this);
             MyArcBagIter iter = nonConstThis->fwdArcs.end();
             return ArcIterator<NodeInfo,ArcInfo>(iter);
@@ -278,7 +278,7 @@
 
     private:
         iterator findArc(MyArcPnt p)const
-        { 
+        {
             //      cout<<"has "<<fwdArcs.size()<<" connected arcs"<<endl;
             //iterator i = fwdArcs.find(p);
             //if(i==end())
@@ -294,13 +294,13 @@
         /** @brief comparisons for nodes.
         @ingroup PublicInterface
         */
-        friend bool operator==(const __NodeType<NodeInfo,ArcInfo> &nd1,const __NodeType<NodeInfo,ArcInfo> &nd2) 
+        friend bool operator==(const __NodeType<NodeInfo,ArcInfo> &nd1,const __NodeType<NodeInfo,ArcInfo> &nd2)
         { return nd1.nodeId == nd2.nodeId;}
 
         /** @brief comparisons for nodes.
         @ingroup PublicInterface
         */
-        friend bool operator!=(const __NodeType<NodeInfo,ArcInfo> &nd1,const __NodeType<NodeInfo,ArcInfo> &nd2) 
+        friend bool operator!=(const __NodeType<NodeInfo,ArcInfo> &nd1,const __NodeType<NodeInfo,ArcInfo> &nd2)
         { return nd1.nodeId != nd2.nodeId;}
 
         /*
@@ -350,7 +350,7 @@
         /// returns const user data on this arc.
         const ArcInfo &operator*()const{ return arcInfo;}
         /*
-        inline friend bool operator<(const __ArcType<NodeInfo, ArcInfo > &arc1, 
+        inline friend bool operator<(const __ArcType<NodeInfo, ArcInfo > &arc1,
         const __ArcType<NodeInfo, ArcInfo > &arc2) ;
         */
         //friend std::ostream &operator<<(std::ostream &os, const __ArcType<NodeInfo, ArcInfo > &arc);
@@ -374,18 +374,19 @@
     public :
 
         bool compareHack(const DynNetArcIterator &otherIter)const
-        {	
+        {
             if(nodeIter == otherIter.nodeIter)
             {
+            		if (nodeIter == net->end()) return true;
                 if(arcIter == otherIter.arcIter)
                 {
-                    return true;	
-                }	
-            }	
+                    return true;
+                }
+            }
             return false;
         }
         bool compareHack2(const DynNetArcIterator &otherIter)const
-        {		
+        {
             if(atEnd() && otherIter.atEnd())
                 return false;
             if(atEnd()||otherIter.atEnd())
@@ -408,8 +409,8 @@
             :net(&thenet),nodeIter(node)
         { if(node != net->end()) arcIter=(*node).begin(); }
 
-        DynNetArcIterator(NetType &thenet, 
-            const MyNodeBagIter &node, 
+        DynNetArcIterator(NetType &thenet,
+            const MyNodeBagIter &node,
             const MyNodeArcIterator &arc)
             :net(&thenet),nodeIter(node),arcIter(arc)
         { }
@@ -442,7 +443,7 @@
 
         DynNetArcIterator operator++()
         {
-            // if past last node, are done, return "at end" 
+            // if past last node, are done, return "at end"
             if(!atEnd())
             {
                 if(arcIter!=(*nodeIter).end())
@@ -470,13 +471,13 @@
         /*
         inline friend bool operator==(const DynNetArcIterator<NetType,NodeInfo,ArcInfo> &rep1,
         const DynNetArcIterator<NetType,NodeInfo,ArcInfo> &rep2);
-        friend bool operator==(const DynNetArcIterator<NetType,NodeInfo,ArcInfo> 
+        friend bool operator==(const DynNetArcIterator<NetType,NodeInfo,ArcInfo>
         &rep1,
-        const DynNetArcIterator<NetType,NodeInfo,ArcInfo> 
+        const DynNetArcIterator<NetType,NodeInfo,ArcInfo>
         &rep2);
-        friend bool operator!=(const DynNetArcIterator<NetType,NodeInfo,ArcInfo>  
+        friend bool operator!=(const DynNetArcIterator<NetType,NodeInfo,ArcInfo>
         &rep1,
-        const DynNetArcIterator<NetType,NodeInfo,ArcInfo>  
+        const DynNetArcIterator<NetType,NodeInfo,ArcInfo>
         &rep2);
         */
         //friend class NetType;
@@ -517,23 +518,23 @@
         {exit(1);}
 
         const_iterator begin()const
-        { 
+        {
             DynNet *nonConstThis = const_cast<DynNet *>(this);
             return nonConstThis->nodes.begin();
-            //return nodes.begin(); 
+            //return nodes.begin();
         }
         iterator begin()
         { return nodes.begin(); }
 
         const_iterator end()const
-        { 
+        {
             DynNet *nonConstThis = const_cast<DynNet *>(this);
-            return nonConstThis->nodes.end(); 
+            return nonConstThis->nodes.end();
         }
         iterator end()
         { return nodes.end(); }
         void erase(const Cgc::NodeId &nodeId)
-        { 
+        {
             // go find the node..
             iterator nodeIt = find(nodeId);
 
@@ -544,10 +545,10 @@
             Node &node = const_cast<Node &>(*nodeIt);
             node.disconnect();
             // remove the node
-            nodes.erase(find(nodeId)); 
+            nodes.erase(find(nodeId));
         }
         void erase(const iterator &nodeIt)
-        { 
+        {
             // have to maintain arcSize manually...the node deletes the arcs
             arcSize-=(*nodeIt).size();
             arcSize-=(*nodeIt).back_size();
@@ -555,7 +556,7 @@
             Node &node=const_cast<Node &>((*nodeIt));
             node.disconnect();
             // remove the node
-            nodes.erase(nodeIt); 
+            nodes.erase(nodeIt);
         }
         void arc_erase(const arc_iterator &start, const arc_iterator &finish)
         {
@@ -578,25 +579,25 @@
             }
         }
         void erase(const iterator &first, const iterator &second)
-        { 
+        {
             for(iterator nodeIt=first;nodeIt != second;nodeIt++)
             {
                 // have to maintain arcSize manually...the node deletes the arcs
                 arcSize-=(*nodeIt).size();
                 arcSize-=(*nodeIt).back_size();
 
-                __NodeType<NodeInfo,ArcInfo> &node = 
+                __NodeType<NodeInfo,ArcInfo> &node =
                     const_cast< __NodeType<NodeInfo,ArcInfo> &>(*nodeIt);
                 node.erase((*nodeIt).begin(),(*nodeIt).end());
             }
-            nodes.erase(first,second); 
+            nodes.erase(first,second);
         }
         const_iterator insert(const NodeInfo &nd)
-        { 
+        {
             return nodes.insert(nodes.end(),
                 __NodeType<NodeInfo, ArcInfo >(
                 Node(idMgr.getNewId(),
-                nd))); 
+                nd)));
         }
 
         size_t size()const{ return nodes.size();}
@@ -604,13 +605,13 @@
 
         Cgc::NodeId getNodeId(const iterator &nodeIt)const{ return (*nodeIt).getNodeId();}
 
-        const_arc_iterator arc_insert(iterator &tail, 
-            const ArcInfo &info, 
+        const_arc_iterator arc_insert(iterator &tail,
+            const ArcInfo &info,
             iterator &head)
         {
             arcSize++;
             Node &node=const_cast<Node &>(*tail);
-            ArcIterator<NodeInfo, ArcInfo > 
+            ArcIterator<NodeInfo, ArcInfo >
                 arcIt( node.insert(__ArcType<NodeInfo, ArcInfo >(tail,
                 info,
                 head)));
@@ -618,7 +619,7 @@
             return arc_iterator(*this, tail, arcIt);
         }
         arc_iterator arc_begin()
-        { 
+        {
             if(size())
             {
                 iterator nodeWithSize;
@@ -635,8 +636,8 @@
             return arc_iterator(*this,begin());
         }
         const_arc_iterator arc_begin()const
-        { 
-            DynNet<NodeInfo, ArcInfo> *netpnt = 
+        {
+            DynNet<NodeInfo, ArcInfo> *netpnt =
                 const_cast< DynNet<NodeInfo, ArcInfo> * >(this);
             if(size())
             {
@@ -656,15 +657,15 @@
 
 
         const_arc_iterator arc_end()const
-        { 
-            DynNet<NodeInfo,ArcInfo> *netpnt= 
+        {
+            DynNet<NodeInfo,ArcInfo> *netpnt=
                 const_cast< DynNet<NodeInfo,ArcInfo> * >(this);
             return const_arc_iterator(*netpnt,netpnt->end());
         }
         const_arc_iterator arc_find(const Cgc::NodeId &tailId,
             const Cgc::NodeId &headId)const
         {
-            DynNet<NodeInfo,ArcInfo> *netpnt= 
+            DynNet<NodeInfo,ArcInfo> *netpnt=
                 const_cast< DynNet<NodeInfo,ArcInfo> * >(this);
             const_iterator tail=find(tailId);
             /*
@@ -688,10 +689,10 @@
                 return arc_end();
             else
                 return arc_iterator(*netpnt,tail,arcFound);
-        } 
+        }
         arc_iterator arc_find(const Cgc::NodeId &tailId, const Cgc::NodeId &headId)
         {
-            DynNet<NodeInfo,ArcInfo> *netpnt= 
+            DynNet<NodeInfo,ArcInfo> *netpnt=
                 const_cast< DynNet<NodeInfo,ArcInfo> * >(this);
             const_iterator tail=find(tailId);
             //if(tail!=end())
@@ -712,6 +713,17 @@
             else
                 return arc_iterator(*netpnt,tail,arcFound);
         }
+        arc_iterator arc_find(const_iterator& tail, const_iterator& head)
+        {
+            DynNet<NodeInfo,ArcInfo> *netpnt=
+                const_cast< DynNet<NodeInfo,ArcInfo> * >(this);
+            Arc anArc(tail,ArcInfo(),head);
+            typename Node::iterator arcFound=(*tail).findArc(&anArc);
+            if(arcFound==(*tail).end())
+                return arc_end();
+            else
+                return arc_iterator(*netpnt,tail,arcFound);
+        }
 
         const_iterator find(const NodeId &id)const
         {
@@ -740,7 +752,7 @@
         }
 
         /*
-        inline friend std::ostream &operator<<(std::ostream &os, 
+        inline friend std::ostream &operator<<(std::ostream &os,
         const DynNet<NodeInfo, ArcInfo > &net);
         */
 
@@ -750,7 +762,7 @@
         {
             //const_iterator nodeIt;
             os<<"NetClass:Undir>"<<size()<<' '<<arc_size()<<std::endl;
-            DynNet<NodeInfo,ArcInfo> *netpnt = 
+            DynNet<NodeInfo,ArcInfo> *netpnt =
                 const_cast<DynNet<NodeInfo,ArcInfo> *>(this);
             for(const_iterator nodeIt = netpnt->begin();
                 nodeIt != netpnt->end();nodeIt++)
@@ -790,7 +802,7 @@
             {
                 is>>id>>numAdj;
                 maxId=std::max(id,maxId);
-                __NodeType<NodeInfo, ArcInfo > nodeIn( Node(id, nd)); 
+                __NodeType<NodeInfo, ArcInfo > nodeIn( Node(id, nd));
 
                 // may have been early insert item..so must check
                 nodeIt = nodes.find(nodeIn);
@@ -804,8 +816,8 @@
                     if(hdIter==nodes.end())
                     {
                         // do a pre-insert...need it now!
-                        hdIter =nodes.insert(nodes.end(), 
-                            __NodeType<NodeInfo, ArcInfo >( Node(id, nd))); 
+                        hdIter =nodes.insert(nodes.end(),
+                            __NodeType<NodeInfo, ArcInfo >( Node(id, nd)));
                     }
                     arc_insert(nodeIt,defaultInfo,hdIter);
                 }
@@ -816,54 +828,54 @@
                 std::cerr<<"Didn't get the last line right!"<<std::endl;
             return is;
         }
-    };  
+    };
 
     template < class NodeInfo, class ArcInfo>
     const __ArcType<NodeInfo, ArcInfo > &ArcIterator<NodeInfo, ArcInfo >::operator*()const
-    { 
-        return (*(*ait)); 
+    {
+        return (*(*ait));
     }
 
     template < class NodeInfo, class ArcInfo>
     __ArcType<NodeInfo,ArcInfo> &ArcIterator<NodeInfo,ArcInfo>::operator*()
-    { 
-        return (*(*ait)); 
+    {
+        return (*(*ait));
     }
 
     template < class NodeInfo, class ArcInfo>
     inline bool operator!=(const ArcIterator<NodeInfo,ArcInfo> &arcIt1,
         const ArcIterator<NodeInfo,ArcInfo> &arcIt2)
-    { 
+    {
         return arcIt1.msvcCompareHack(arcIt2) != 0;
     }
 
     template < class NodeInfo, class ArcInfo>
     inline bool operator==(const ArcIterator<NodeInfo,ArcInfo> &arcIt1,
         const ArcIterator<NodeInfo,ArcInfo> &arcIt2)
-    { 
+    {
         return arcIt1.msvcCompareHack(arcIt2) == 0;
     }
 
     template <class NodeInfo, class ArcInfo>
-    inline std::ostream &operator<<(std::ostream &os, 
+    inline std::ostream &operator<<(std::ostream &os,
         const DynNet<NodeInfo,ArcInfo> &net)
     {
         os<<"OutputNet["<<net.size()<<','<<net.arc_size()<<"]"<<std::endl;
         /*  */
         typename DynNet<NodeInfo,ArcInfo>::const_iterator last = net.end();
-        for(typename DynNet<NodeInfo,ArcInfo>::const_iterator cNodeIt = 
+        for(typename DynNet<NodeInfo,ArcInfo>::const_iterator cNodeIt =
             net.begin();
             cNodeIt != last;cNodeIt++)
-        { 
+        {
             os<<"Node "<<net.getNodeId(cNodeIt)<<" with "<<(*cNodeIt).size()<<" arcs out and "
                 <<(*cNodeIt).back_size()<<" arcs in"<<std::endl;
         }
-        for(typename DynNet<NodeInfo,ArcInfo>::const_arc_iterator cArcIt = 
+        for(typename DynNet<NodeInfo,ArcInfo>::const_arc_iterator cArcIt =
             net.arc_begin();
             cArcIt != net.arc_end();cArcIt++)
-        { 
+        {
             os<<*cArcIt<<" 0---+ "<<net.getNodeId((*cArcIt).tail())<<" +---+ "
-                <<net.getNodeId((*cArcIt).head())<<"+--->"<<std::endl; 
+                <<net.getNodeId((*cArcIt).head())<<"+--->"<<std::endl;
         }
         /*  */
         return os;
@@ -871,12 +883,12 @@
 
     template <class NodeInfo, class ArcInfo >
     typename __NodeType<NodeInfo,ArcInfo>::iterator __NodeType<NodeInfo,ArcInfo>::insert(const __ArcType<NodeInfo,ArcInfo> &newArc)
-    { 
-        __ArcType<NodeInfo,ArcInfo> * lclArc= 
+    {
+        __ArcType<NodeInfo,ArcInfo> * lclArc=
             new __ArcType<NodeInfo,ArcInfo>(newArc);
 
         MyArcBagIter ait = fwdArcs.insert(fwdArcs.end(),lclArc);
-        __NodeType<NodeInfo,ArcInfo> &node 
+        __NodeType<NodeInfo,ArcInfo> &node
             = const_cast< __NodeType<NodeInfo,ArcInfo> &>((*lclArc->head()));
         node.back_insert(lclArc);
         return ArcIterator<NodeInfo,ArcInfo>(ait);
@@ -884,13 +896,13 @@
 
     template <class NodeInfo, class ArcInfo >
     void __NodeType<NodeInfo,ArcInfo>::back_insert(const __ArcType<NodeInfo,ArcInfo> *newArc)
-    { 
+    {
 #ifdef MSVCBUGS
         backArcs.insert(backArcs.end(),const_cast<__ArcType<NodeInfo,ArcInfo> *>(newArc));
 #else
-        __ArcType<NodeInfo,ArcInfo> *nonConst = 
+        __ArcType<NodeInfo,ArcInfo> *nonConst =
             const_cast< __ArcType<NodeInfo,ArcInfo> *>(newArc);
-        backArcs.insert(backArcs.end(),nonConst); 
+        backArcs.insert(backArcs.end(),nonConst);
 #endif
     }
 
@@ -898,23 +910,23 @@
     void __NodeType<NodeInfo,ArcInfo>::back_erase(const __ArcType<NodeInfo,
         ArcInfo> *arcToErase)
 
-    { 
+    {
         __ArcType<NodeInfo,ArcInfo> *nonConst=
             const_cast<__ArcType<NodeInfo,ArcInfo> *>(arcToErase);
-        backArcs.erase(nonConst); 
+        backArcs.erase(nonConst);
     }
 
     template<class NodeInfo, class ArcInfo>
     inline bool operator<(const __NodeType<NodeInfo,ArcInfo> &nd1,
         const __NodeType<NodeInfo,ArcInfo> &nd2)
-    { 
+    {
         return nd1.getNodeIdHack()< nd2.getNodeIdHack();
     }
 
     template <class NodeInfo, class ArcInfo >
-    inline bool operator<(const __ArcType<NodeInfo,ArcInfo> &arc1, 
-        const __ArcType<NodeInfo,ArcInfo> &arc2) 
-    { 
+    inline bool operator<(const __ArcType<NodeInfo,ArcInfo> &arc1,
+        const __ArcType<NodeInfo,ArcInfo> &arc2)
+    {
         //cout<<"comparing arcs.."<<std::endl;
         //cout<<"arc1="<<&(*arc1.hd)<<"+"<<&(*arc1.tl)<<std::endl;
         //cout<<"arc2="<<&(*arc2.hd)<<"+"<<&(*arc2.tl)<<std::endl;
@@ -933,7 +945,7 @@
         //if(static_cast<int>(arc1.tl) > static_cast<int>(arc2.tl))
         //return false;
         //if(&(*arc1.tl) >  &(*arc2.tl)) -----> breaks arc_find
-        //return *arc1 < *arc2; 
+        //return *arc1 < *arc2;
         */
     }
 
@@ -952,14 +964,14 @@
     }
     template < class NodeInfo, class ArcInfo>
     std::ostream &operator<<(std::ostream &os, const __NodeType<NodeInfo, ArcInfo > &node)
-    { 
+    {
         return os<<*node;
     }
 
     template < class NodeInfo, class ArcInfo>
     std::ostream &operator<<(std::ostream &os, const __ArcType<NodeInfo, ArcInfo > &arc)
-    { 
-        return os<<*arc; 
+    {
+        return os<<*arc;
     }
 
     template < class NodeInfo, class ArcInfo >
@@ -967,6 +979,6 @@
     {
         return (*n1) != (*n2);
     }
-};
+}
 
 #endif
Index: Cgc/src/NodeId.h
===================================================================
--- Cgc/src/NodeId.h	(Revision 21)
+++ Cgc/src/NodeId.h	(Arbeitskopie)
@@ -18,13 +18,13 @@
     bool operator>(const NodeId &id1, const NodeId &id2);
     bool operator==(const NodeId &id1, const NodeId &id2);
     bool operator!=(const NodeId &id1, const NodeId &id2);
-    /** @brief Utility class to assist in uniquely identifying nodes.  
-    This represents a unique identifier used to look up nodes.  The are assigned by the Graph type and are looked up 
+    /** @brief Utility class to assist in uniquely identifying nodes.
+    This represents a unique identifier used to look up nodes.  The are assigned by the Graph type and are looked up
     through the graph using node iterators.
     @note: given the current implementation, the graphs are limited to the USHRT_MAX many nodes.
     @ingroup PublicInterface
     */
-    class NodeId 
+    class NodeId
     {
     private:
         unsigned short nodeId;
@@ -37,13 +37,13 @@
         unsigned short getNodeId()const{ return nodeId;}
         /// constructs a nodeid from an unsigned short.  Defaults to the maximum.
         NodeId(const unsigned short &id=USHRT_MAX):nodeId(id){}
-        /// sets the nodeId to the maximum value. 
+        /// sets the nodeId to the maximum value.
         void setMaxNodeId(){ nodeId = USHRT_MAX;}
-        /// sets the nodeId to the minimum value. 
+        /// sets the nodeId to the minimum value.
         void setMinNodeId(){ nodeId = 0;}
         /// increments the node id by one (post-increment)
         NodeId operator++(int){ NodeId tmp(nodeId); ++nodeId; return tmp;}
-        /// pre-increments the node id by one 
+        /// pre-increments the node id by one
         NodeId &operator++(){ ++nodeId; return *this;}
         /// assignment operator.
         const NodeId &operator=(const NodeId &otherId)
@@ -54,7 +54,7 @@
         friend std::istream &operator>>(std::istream &is, NodeId &id);
         /// Comparison functions for nodeIds.
         friend bool operator<(const NodeId &id1, const NodeId &id2)
-        { return id1.nodeId < id2.nodeId;} 
+        { return id1.nodeId < id2.nodeId;}
         friend bool operator>(const NodeId &id1, const NodeId &id2)
         { return id1.nodeId > id2.nodeId;}
         friend bool operator==(const NodeId &id1, const NodeId &id2)
@@ -66,12 +66,12 @@
     { return os<<'N'<<'^'<<id.nodeId; }
 
     inline std::istream &operator>>(std::istream &is, NodeId &id)
-    { 
+    {
         char ch;
         is>>ch;
         is>>ch;
         is>>id.nodeId;
         return is;
     }
-};  
+}
 #endif
Index: Cgc/src/NodeIdMgr.h
===================================================================
--- Cgc/src/NodeIdMgr.h	(Revision 21)
+++ Cgc/src/NodeIdMgr.h	(Arbeitskopie)
@@ -17,13 +17,13 @@
     class NodeIdMgr
     {
         NodeId lastId;
-  
+
     public:
         // didn't want these two public....but MSVC won't let the friend statement work!
-        NodeIdMgr(const NodeId id=NodeId(0)):lastId(NodeId(id)){} 
+        NodeIdMgr(const NodeId id=NodeId(0)):lastId(NodeId(id)){}
         NodeId getNewId(){ NodeId retVal=lastId;lastId++;return retVal;}
         void setMaxId(const NodeId &maxId){ lastId=maxId;}
         //friend class NetType;
     };
-};
-#endif 
+}
+#endif
Index: Cgc/src/PLess.h
===================================================================
--- Cgc/src/PLess.h	(Revision 21)
+++ Cgc/src/PLess.h	(Arbeitskopie)
@@ -17,5 +17,5 @@
     struct PLess : std::binary_function<T, T, bool> {
         bool operator()(const T& x, const T& y) const { return *x < *y; }
     };
-};
+}
 #endif
